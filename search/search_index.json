{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Getting Started ansible-provision is part of suite of ansible roles that provide a common interface for provisioning infrastructure. While there is a slant towards AWS services many interfaces support vmware vCenter and Azure. Design Principles Convention over configuration - Require as minimal configuration as possible, lookup ids in the background and use conventions whenever possible Prefer declarative template (e.g. AWS Cloudformation / Azure Resource Templates) to direct API calls Use cloud-init extensively to setup volumes and bootstrap instances for deployment. Dependencies ansible (duh) ansible-deploy is used to generate cloudinit config (It shares many of the same interfaces as ansible-provision) systools provides many helpers and bootstraping tools (systools will be installed by ansible-deploy if it is missing) fireviz is a tool to convert Graphviz firewall diagrams into Cloudformation/ARM templates (Optional) ansible-dependencies provides RPM, DEB and pip packages that simplify the installation of ansible with all the required dependencies to use cloud and networking modules (Optional) ansible-run provides CLI tools for easily running and testing ansible playbooks using ansible-dependencies. Folder Structure 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 \u251c\u2500\u2500 cloudformation # applies to AWS only \u2502 \u2514\u2500\u2500 iam.cf \u251c\u2500\u2500 firewall \u2502 \u251c\u2500\u2500 all.gv \u2502 \u2514\u2500\u2500 mapping.yml \u251c\u2500\u2500 inventory \u2502 \u251c\u2500\u2500 group_vars \u2502 \u2502 \u251c\u2500\u2500 all \u2502 \u2502 \u251c\u2500\u2500 app \u2502 \u2502 \u251c\u2500\u2500 db \u2502 \u2502 \u251c\u2500\u2500 dev \u2502 \u2502 \u251c\u2500\u2500 test \u2502 \u2502 \u2514\u2500\u2500 web \u2502 \u2514\u2500\u2500 hosts \u251c\u2500\u2500 play.yml \u2514\u2500\u2500 roles \u2514\u2500\u2500 requirements.yml","title":"Getting Started"},{"location":"#getting-started","text":"ansible-provision is part of suite of ansible roles that provide a common interface for provisioning infrastructure. While there is a slant towards AWS services many interfaces support vmware vCenter and Azure.","title":"Getting Started"},{"location":"#design-principles","text":"Convention over configuration - Require as minimal configuration as possible, lookup ids in the background and use conventions whenever possible Prefer declarative template (e.g. AWS Cloudformation / Azure Resource Templates) to direct API calls Use cloud-init extensively to setup volumes and bootstrap instances for deployment.","title":"Design Principles"},{"location":"#dependencies","text":"ansible (duh) ansible-deploy is used to generate cloudinit config (It shares many of the same interfaces as ansible-provision) systools provides many helpers and bootstraping tools (systools will be installed by ansible-deploy if it is missing) fireviz is a tool to convert Graphviz firewall diagrams into Cloudformation/ARM templates (Optional) ansible-dependencies provides RPM, DEB and pip packages that simplify the installation of ansible with all the required dependencies to use cloud and networking modules (Optional) ansible-run provides CLI tools for easily running and testing ansible playbooks using ansible-dependencies.","title":"Dependencies"},{"location":"#folder-structure","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 \u251c\u2500\u2500 cloudformation # applies to AWS only \u2502 \u2514\u2500\u2500 iam.cf \u251c\u2500\u2500 firewall \u2502 \u251c\u2500\u2500 all.gv \u2502 \u2514\u2500\u2500 mapping.yml \u251c\u2500\u2500 inventory \u2502 \u251c\u2500\u2500 group_vars \u2502 \u2502 \u251c\u2500\u2500 all \u2502 \u2502 \u251c\u2500\u2500 app \u2502 \u2502 \u251c\u2500\u2500 db \u2502 \u2502 \u251c\u2500\u2500 dev \u2502 \u2502 \u251c\u2500\u2500 test \u2502 \u2502 \u2514\u2500\u2500 web \u2502 \u2514\u2500\u2500 hosts \u251c\u2500\u2500 play.yml \u2514\u2500\u2500 roles \u2514\u2500\u2500 requirements.yml","title":"Folder Structure"},{"location":"ansible-addons/","text":"Ansible Role for creating systemd services, for managing existing services use the built-in systemd module. Filters name description file_exists (path) dir_exists (path) jsonpath (data) transforms data using jsonpath_rw nestedelement (path) Returns an nested element from an object tree by path (seperated by / or .) play_groups (play_hosts, groups, hostvars) Returns a list of groups that are active within a play split (string, separator=' ') to_map (map, key, value) walk_up (object, path) Walks up an object tree from the lowest level collecting all attributes not available at lower levels map_to_entries (dict, key, value) Convert a dict into a list of entries Modules cloudinit_iso 1 2 3 4 5 6 7 8 - cloudinit_iso : dest : \"{{playbook_dir}}/cloudinit.iso\" user : | #cloud-config preserve_hostname: true hostname: ansible-hostname users: - name: hostname Note cloudinit_iso requires the genisoimage package to be installed.","title":"ansible-extras"},{"location":"ansible-addons/#filters","text":"name description file_exists (path) dir_exists (path) jsonpath (data) transforms data using jsonpath_rw nestedelement (path) Returns an nested element from an object tree by path (seperated by / or .) play_groups (play_hosts, groups, hostvars) Returns a list of groups that are active within a play split (string, separator=' ') to_map (map, key, value) walk_up (object, path) Walks up an object tree from the lowest level collecting all attributes not available at lower levels map_to_entries (dict, key, value) Convert a dict into a list of entries","title":"Filters"},{"location":"ansible-addons/#modules","text":"","title":"Modules"},{"location":"ansible-addons/#cloudinit_iso","text":"1 2 3 4 5 6 7 8 - cloudinit_iso : dest : \"{{playbook_dir}}/cloudinit.iso\" user : | #cloud-config preserve_hostname: true hostname: ansible-hostname users: - name: hostname Note cloudinit_iso requires the genisoimage package to be installed.","title":"cloudinit_iso"},{"location":"aws/","text":"AWS The AWS provisioning lifecycle uses ansible to generate cloudformation - there are some runtime arguments that can be used to reduce the aggressiveness of the Cloudformation replacement rules. Config Default Description account_id aws account id domain domain that is used for internal DNS lookup domain_id region AWS region security_groups default {{role}} {{role}}-{{purpose}} A list of security group names to apply default_ssl_certificate self_signed_default name to use for the self signed SSL placeholder elbs a list of groups that include elb's Runtime Arguments Pass runtime arguments using -e e.g. -e ami_update=true or save on a per host / group level Argument Default Description ami_update false Set to false to disable updating the AMI, causing the instance to be terminated and be re-created userData_update false Set to false to disable updating the user-data which would normally cause instances to be restarted boot_disk_update false create_change_set true","title":"AWS"},{"location":"aws/#aws","text":"The AWS provisioning lifecycle uses ansible to generate cloudformation - there are some runtime arguments that can be used to reduce the aggressiveness of the Cloudformation replacement rules. Config Default Description account_id aws account id domain domain that is used for internal DNS lookup domain_id region AWS region security_groups default {{role}} {{role}}-{{purpose}} A list of security group names to apply default_ssl_certificate self_signed_default name to use for the self signed SSL placeholder elbs a list of groups that include elb's","title":"AWS"},{"location":"aws/#runtime-arguments","text":"Pass runtime arguments using -e e.g. -e ami_update=true or save on a per host / group level Argument Default Description ami_update false Set to false to disable updating the AMI, causing the instance to be terminated and be re-created userData_update false Set to false to disable updating the user-data which would normally cause instances to be restarted boot_disk_update false create_change_set true","title":"Runtime Arguments"},{"location":"azure/","text":"Config Default Description account_id aws account id infra_resource_group Resource group for the network resource_group Resource group for VM's region vpc_id az_managed boot_diag_uri backup_vault public_ip security_groups default {{role}} {{role}}-{{purpose}} A list of security group names to apply image OR image_publisher RedHat image_offer RHEL image_sku 7.5 image_version latest","title":"Azure"},{"location":"bootstrapping/","text":"Bootstrapping Name Default Description ssh_key_user ec2-user The name of the preconfigured user in the image ssh_key_full The SSH public key to install as an authorized key for ssh_key_user git_repo git_branch master git_path /etc/repository git_account Optional: The AWS account that git_repo is hosted in git_role Optional: An IAM role in git_account that has codecommit permissions on git_repo phone_home A bash snippet that gets executed at the end of bootstrapping - e.g. To execute an initial Ansible Tower playbook run A cloud-init file is specified on launch that provides: Inserts the ssh_key_full public key into the ssh_key_user 's authorized_keys file Formats and mounts any volumes that have mount params and adds them into /etc/fstab Updates the hostname Updates /etc/environment with the role, purpose, purposeId, environment, region, domain, ami values Configures git to use the git_account/git_role IAM role for AWS CodeCommit checkouts (if specified) Clones git_repo to git_path and installs any git hooks in the .hooks directory and execute the post-merge hook. Installs a systemd service and timer git-sync that keeps the git repo in sync. Executes the script specified in phone_home","title":"Bootstrapping"},{"location":"bootstrapping/#bootstrapping","text":"Name Default Description ssh_key_user ec2-user The name of the preconfigured user in the image ssh_key_full The SSH public key to install as an authorized key for ssh_key_user git_repo git_branch master git_path /etc/repository git_account Optional: The AWS account that git_repo is hosted in git_role Optional: An IAM role in git_account that has codecommit permissions on git_repo phone_home A bash snippet that gets executed at the end of bootstrapping - e.g. To execute an initial Ansible Tower playbook run A cloud-init file is specified on launch that provides: Inserts the ssh_key_full public key into the ssh_key_user 's authorized_keys file Formats and mounts any volumes that have mount params and adds them into /etc/fstab Updates the hostname Updates /etc/environment with the role, purpose, purposeId, environment, region, domain, ami values Configures git to use the git_account/git_role IAM role for AWS CodeCommit checkouts (if specified) Clones git_repo to git_path and installs any git hooks in the .hooks directory and execute the post-merge hook. Installs a systemd service and timer git-sync that keeps the git repo in sync. Executes the script specified in phone_home","title":"Bootstrapping"},{"location":"customization/","text":"","title":"Customization"},{"location":"firewall/","text":"Firewalls ansible-provision uses fireviz to map and create security groups: firewall.gv 1 2 3 4 5 6 7 digraph G { node[shape=rectangle] \"Internet\" -> \"ELB\" [xlabel=\"80,443\"] \"ELB\" -> \"Web\" [xlabel=\"80,443\"] \"App\" -> \"DB\" [xlabel=\"5432\"] } to generate an image use: dot firewall.gv -Tpng -o firewall.png","title":"Firewalls"},{"location":"firewall/#firewalls","text":"ansible-provision uses fireviz to map and create security groups: firewall.gv 1 2 3 4 5 6 7 digraph G { node[shape=rectangle] \"Internet\" -> \"ELB\" [xlabel=\"80,443\"] \"ELB\" -> \"Web\" [xlabel=\"80,443\"] \"App\" -> \"DB\" [xlabel=\"5432\"] } to generate an image use: dot firewall.gv -Tpng -o firewall.png","title":"Firewalls"},{"location":"load-balancing/","text":"Loadbalancers Application Load Balancer 1 2 3 elb : - { port : '8443' , type : https , alb : true } - { port : '8080' , type : http , alb : true } Classic Load Balancer 1 2 3 elb : - { port : '8443' , type : https } - { port : '8080' , type : http } Public load balancers 1 2 3 elb : - { port : '8443' , type : https , scheme : 'internet-facing' } - { port : '8080' , type : http , scheme : 'internet-facing' } Name Default Description port type http http,https,tcp check {port}/ alb false Create a Application Load Balancer instead of classic checkPath / ALB only: checkPort {port} ALB only: checkType {type} ALB only: unhealthyCount 3 healthyCount 5 timeout 10 Timeout in seconds internal 30 Check interval in seconds code 200 ALB only sslId {default_ssl_arn} ACM or IAM SSL certificate arn alias {group_name} security_group subnet_name stickiness false scheme internal internal or internet-facing","title":"Load Balancing"},{"location":"load-balancing/#loadbalancers","text":"Application Load Balancer 1 2 3 elb : - { port : '8443' , type : https , alb : true } - { port : '8080' , type : http , alb : true } Classic Load Balancer 1 2 3 elb : - { port : '8443' , type : https } - { port : '8080' , type : http } Public load balancers 1 2 3 elb : - { port : '8443' , type : https , scheme : 'internet-facing' } - { port : '8080' , type : http , scheme : 'internet-facing' } Name Default Description port type http http,https,tcp check {port}/ alb false Create a Application Load Balancer instead of classic checkPath / ALB only: checkPort {port} ALB only: checkType {type} ALB only: unhealthyCount 3 healthyCount 5 timeout 10 Timeout in seconds internal 30 Check interval in seconds code 200 ALB only sslId {default_ssl_arn} ACM or IAM SSL certificate arn alias {group_name} security_group subnet_name stickiness false scheme internal internal or internet-facing","title":"Loadbalancers"},{"location":"reference/","text":"Option Description AWS Azure vSphere ami Image name alias: template region alias: datacenter az Availability zone alias: cluster cpu Number of cores, Default: 2 \u2716 \u2716 mem GB of memory, Default: 2 \u2716 \u2716 instance_type \u2716 Use mem and cpu subnet_name alias: vlan tags, all_tags Map of tags Volumes boot_disk_size boot_disk_type gp2 \u2716 \u2716 data_volume_size Shorthand for creating a default data volume instance_volumes \u2716 \u2716 volumes List of volumes Security instance_role IAM Instance Role \u2716 \u2716 security_groups List of security group names \u2716 \u2716 ssh_key_full ssh_key_name AWS SSH Key Pair Name \u2716 \u2716 ssh_key_user Defaults to: ec2-user Bootstrapping phone_home List of commands to run on startup Load Balancing elbs List of group names to create load balancers for \u2716 \u2716","title":"Reference"},{"location":"vmware/","text":"VMWare VMWare provisioning is done via the vCenter api's and a cloud-init script that is bundled into an ISO (per VM). Config Default Description datacenter alias: region cluster alias: az vlan alias: subnet_name hostname username password vm_groups vm_attributes alias: tags datastore","title":"vmware"},{"location":"vmware/#vmware","text":"VMWare provisioning is done via the vCenter api's and a cloud-init script that is bundled into an ISO (per VM). Config Default Description datacenter alias: region cluster alias: az vlan alias: subnet_name hostname username password vm_groups vm_attributes alias: tags datastore","title":"VMWare"},{"location":"volumes/","text":"Storage Volumes 1 2 volumes : - {} Name Default Description size Size in GB of the volume id The name of the volume e.g. volume it will be used as suffix dev The unique device path to use e.g. /dev/xvf , host:/nfs_mount type gp2 format Optional: Partition type e.g. xfs , lvm , nfs mount Optional: Mount point for the volume e.g. /mnt/volume LVM LVM volumes are supported are supported: To create an physical volume specify format: lvm and the volume name under mount: VolName Then add another volume with dev: VolName Example: create a 200GB volume called VolData, format it with xfs and then mount under /pgdata 1 2 3 volumes : - { size : 201 , id : data , dev : /dev/xvdf , format : lvm , mount : VolData } - { size : 200 , id : data-pgdata , dev : VolData , format : xfs , mount : /pgdata } Example: Creating 3 LVM volumes for Postgres 1 2 3 4 5 6 7 volumes : - { size : 201 , id : data , dev : /dev/xvdf , format : lvm , mount : VolData } - { size : 200 , id : data-pgdata , dev : VolData , format : xfs , mount : /pgdata } - { size : 101 , id : backups , dev : /dev/xvdg , format : lvm , mount : VolBackups } - { size : 100 , id : backups-data , dev : VolBackups , format : xfs , mount : /pgbackups } - { size : 51 , id : wal , dev : /dev/xvdh , format : lvm , mount : VolWAL } - { size : 50 , id : wal-share , dev : VolWAL , format : xfs , mount : /pgwal } result: 1 2 3 4 5 6 $ df -h Filesystem Size Used Avail Use% Mounted on ... /dev/mapper/VolData-_pgdata 200G 33M 200G 1 % /pgdata /dev/mapper/VolBackups-_pgbackups 100G 33M 100G 1 % /pgbackups /dev/mapper/VolWAL-_pgwal 50G 33M 50G 1 % /pgwal Warning Due to some differences in sizing it is recommended to make LVM logical volumes 1GB smaller than the physical volume Instance Volume 1 2 instance_volumes : - {} Name Default Description dev format mount","title":"Volumes"},{"location":"volumes/#storage","text":"","title":"Storage"},{"location":"volumes/#volumes","text":"1 2 volumes : - {} Name Default Description size Size in GB of the volume id The name of the volume e.g. volume it will be used as suffix dev The unique device path to use e.g. /dev/xvf , host:/nfs_mount type gp2 format Optional: Partition type e.g. xfs , lvm , nfs mount Optional: Mount point for the volume e.g. /mnt/volume","title":"Volumes"},{"location":"volumes/#lvm","text":"LVM volumes are supported are supported: To create an physical volume specify format: lvm and the volume name under mount: VolName Then add another volume with dev: VolName Example: create a 200GB volume called VolData, format it with xfs and then mount under /pgdata 1 2 3 volumes : - { size : 201 , id : data , dev : /dev/xvdf , format : lvm , mount : VolData } - { size : 200 , id : data-pgdata , dev : VolData , format : xfs , mount : /pgdata } Example: Creating 3 LVM volumes for Postgres 1 2 3 4 5 6 7 volumes : - { size : 201 , id : data , dev : /dev/xvdf , format : lvm , mount : VolData } - { size : 200 , id : data-pgdata , dev : VolData , format : xfs , mount : /pgdata } - { size : 101 , id : backups , dev : /dev/xvdg , format : lvm , mount : VolBackups } - { size : 100 , id : backups-data , dev : VolBackups , format : xfs , mount : /pgbackups } - { size : 51 , id : wal , dev : /dev/xvdh , format : lvm , mount : VolWAL } - { size : 50 , id : wal-share , dev : VolWAL , format : xfs , mount : /pgwal } result: 1 2 3 4 5 6 $ df -h Filesystem Size Used Avail Use% Mounted on ... /dev/mapper/VolData-_pgdata 200G 33M 200G 1 % /pgdata /dev/mapper/VolBackups-_pgbackups 100G 33M 100G 1 % /pgbackups /dev/mapper/VolWAL-_pgwal 50G 33M 50G 1 % /pgwal Warning Due to some differences in sizing it is recommended to make LVM logical volumes 1GB smaller than the physical volume","title":"LVM"},{"location":"volumes/#instance-volume","text":"1 2 instance_volumes : - {} Name Default Description dev format mount","title":"Instance Volume"}]}