#!/bin/bash
# ARG_OPTIONAL_SINGLE([inventory],[i],[ansible inventory file or directory])
# ARG_OPTIONAL_SINGLE([host-prefix],[],[The prefix to add to each hostname],[])
# ARG_OPTIONAL_SINGLE([template],[],[AMI or VMWare template to use to provision],[])
# ARG_OPTIONAL_SINGLE([target],[],[The provisioning target, one of: aws, vmware, azure, aws-service-catalog],[])
# ARG_OPTIONAL_SINGLE([count],[],[Number of instances to provision],[1])
# ARG_OPTIONAL_SINGLE([cloud-init],[],[Path to cloud-init file to use],[])
# ARG_OPTIONAL_SINGLE([group],[],[Ansible inventory group name],[])
# ARG_OPTIONAL_SINGLE([hostname],[],[Hostname to use for instance],[])
# ARG_OPTIONAL_BOOLEAN([install],[],[Install all ansible roles and then exit],[off])
# ARG_OPTIONAL_BOOLEAN([dev-mode],[],[skip role pinning],[off])
# ARG_OPTIONAL_SINGLE([git-base],[],[The git repository base for roles],[https://github.com/moshloop])
# ARG_HELP([])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.8.0 one line above ###
### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

log "Starting"

ROLE_NAME=provision
DIR=~/.ansible/roles/$ROLE_NAME
GIT_BASE=$git_base
DEV_MODE=$dev_mode
PLAYBOOK=.ansible-$ROLE_NAME.yml
inventory=$inventory
group=$group
host_prefix=$host_prefix
ARGS=


if [[ "$cloud_init" != "" ]]; then
  ARGS+=" -e cloud_init_path=$cloud_init"
fi

if [[ "$count" != "" ]]; then
  ARGS+=" -e instance_count=$count"
fi

if [[ "$template" != "" ]]; then
  ARGS+=" -e template=$template"
fi

if [[ "$inventory" == "" && -d inventory ]]; then
  ARGS+=" -i inventory"
  inventory="inventory"
fi


checkout_role() {
  DIR=~/.ansible/roles/$1
  if [[ ! -e $DIR ]]; then
    git clone $GIT_BASE/ansible-$1.git $DIR
  fi
  pwd=$(pwd)

  if [[ "$ARG1" == "install" ]]; then
    return
  elif [[  "$ARG1" == "update" ]]; then
    cd $DIR
    git fetch --all
    cd $pwd
    return
  fi

  filter="._meta.hostvars | values[] | .ansible_$1_version"
  desired_tag=$( ansible-inventory -i $inventory --list | jq -r "$filter" | head -n1)

  pwd=$(pwd)
  cd $DIR
  current_tag=$(git describe --tags)

  if [[ "$desired_tag" != "null" && "$desired_tag" != "" && "$desired_tag" != "$current_tag" ]]; then
    echo "Checking out $desired_tag"
    git fetch
    git checkout $desired_tag
  fi
  echo "Using ansible-${1} $(git log -n1 --oneline)"
  cd $pwd
}

function finish {
  rm $PLAYBOOK
}

if [[ ! -e $PLAYBOOK ]]; then
  ln -s $DIR/$ROLE_NAME.yml $PLAYBOOK
fi

if [[ "$dev_mode" == 'false' ]]; then
  checkout_role "deploy"
  checkout_role "provision"
  trap finish EXIT
fi

if [[ "$install" == "on" ]] ; then
  exit
fi

if [[ ! -e $inventory/hosts && ! -e $inventory/hosts.ini ]]; then
  echo "No hosts detected using $host_prefix/$group"
  echo "[$group]" > $inventory/hosts
  echo "${host_prefix}" >> $inventory/hosts
  delete_hosts() {
    rm inventory/hosts
  }
  trap delete_hosts EXIT
fi

export ANSIBLE_HASH_BEHAVIOUR=merge
export DISPLAY_SKIPPED_HOSTS=false
export DISPLAY_OK_HOSTS=false
export ANSIBLE_CALLBACK_WHITELIST=dense2
export ANSIBLE_STDOUT_CALLBACK=${ANSIBLE_STDOUT_CALLBACK:-dense2}
export ANSIBLE_CALLBACK_PLUGINS=$DIR/callback_plugins
export ANSIBLE_INVENTORY_IGNORE_REGEX=build/*

echo ansible-playbook  $ARGS $@ $PLAYBOOK
eval ansible-playbook  $ARGS $@ $PLAYBOOK

# ] <-- needed because of Argbash
