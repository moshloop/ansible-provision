#!/bin/bash
# ARG_OPTIONAL_REPEATED([inventory],[i],[ansible inventory file or directory],[])
# ARG_OPTIONAL_SINGLE([host-prefix],[],[The prefix to add to each hostname],[])
# ARG_OPTIONAL_SINGLE([template],[],[AMI or VMWare template to use to provision],[])
# ARG_OPTIONAL_SINGLE([target],[],[The provisioning target, one of: aws, vmware, azure, aws-service-catalog],[])
# ARG_OPTIONAL_SINGLE([count],[],[Number of instances to provision],[1])
# ARG_OPTIONAL_SINGLE([cloud-init],[],[Path to cloud-init file to use],[])
# ARG_OPTIONAL_SINGLE([group],[],[Ansible inventory group name],[])
# ARG_OPTIONAL_SINGLE([config],[],[A file of variables to add to the all ansible group],[])
# ARG_OPTIONAL_SINGLE([hostname],[],[Hostname to use for instance],[])
# ARG_OPTIONAL_BOOLEAN([verbose],[v],[Verbosity],[off])
# ARG_OPTIONAL_SINGLE([host-suffix-format],[],[Date format to append to hostname],[+%Y%m%d%H%M%S])
# ARG_OPTIONAL_REPEATED([limit],[l],[further limit selected hosts to an additional pattern],[])
# ARG_OPTIONAL_REPEATED([extra],[e],[set additional variables as key=value or YAML/JSON, if            filename prepend with @],[])
# ARG_OPTIONAL_BOOLEAN([install],[],[Install all ansible roles and then exit],[off])
# ARG_OPTIONAL_BOOLEAN([dev-mode],[],[skip role pinning],[off])
# ARG_OPTIONAL_BOOLEAN([debug],[],[skip role pinning],[off])
# ARG_OPTIONAL_BOOLEAN([print-ip],[],[Print only the provisioned IP's to stdout, everything else to stderr],[off])
# ARG_OPTIONAL_SINGLE([git-base],[],[The git repository base for roles],[https://github.com/moshloop])
# ARG_HELP([])
#start_region
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.8.0 one line above ###
### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash
#end_region

# set -x
log "ansible-provision2: $@"

ROLE_NAME=provision
DIR=~/.ansible/roles/$ROLE_NAME
GIT_BASE=$git_base
DEV_MODE=$dev_mode
PLAYBOOK=.ansible-$ROLE_NAME.yml
ARGS=


for i in "${inventory[@]}"; do
  ARGS+=" -i $i"
done

for l in "${limit[@]}"; do
  ARGS+=" -l $l"
done

for e in "${extra[@]}"; do
  ARGS+=" -e $e"
done

[[ "$hostname" != "" && "$host_prefix" != "" ]] && hostname=${host_prefix}${hostname}
[[ "$hostname" != "" ]] && host_suffix_format=""
[[ "$hostname" != "" && "$group" == "" ]] && group="all"
[[ "$hostname" == "" && "$host_prefix" != "" ]] && hostname=${host_prefix}
[[ "$hostname" != "" && "$host_suffix_format" != "" ]] && hostname=${hostname}$(date "$host_suffix_format")
[[ "$cloud_init" != "" ]] && ARGS+=" -e cloud_init_path=$cloud_init"
[[ "$hostname" != "" ]]   && ARGS+=" -e hostname=$hostname"
[[ "$count" != "" ]]      && ARGS+=" -e instance_count=$count"
[[ "$template" != "" ]]   && ARGS+=" -e template=$template"
[[ "$inventory" == ""     && -d inventory ]] && inventory="inventory"
[[ "$verbose" == "on" ]]  && ARGS+=" -v"
[[ "$inventory" == "" ]]  && inventory=.inventory; mkdir .inventory; ARGS+=" -i .inventory"

if [[ "$config" != "" ]]; then
  [[ ! -d $inventory/group_vars/all ]] && mkdir -p $inventory/group_vars/all
  temp_cp "$config" $inventory/group_vars/all/00$(basename $config)
fi

checkout_role() {
  DIR=~/.ansible/roles/$1
  if [[ ! -e $DIR ]]; then
    git clone $GIT_BASE/ansible-$1.git $DIR
  fi
  pwd=$(pwd)

  if [[ "$ARG1" == "install" ]]; then
    return
  elif [[  "$ARG1" == "update" ]]; then
    cd $DIR
    git fetch --all
    cd $pwd
    return
  fi

  filter="._meta.hostvars | values[] | .ansible_$1_version"
  desired_tag=$( ansible-inventory -i $inventory --list | jq -r "$filter" | head -n1)

  pwd=$(pwd)
  cd $DIR
  current_tag=$(git describe --tags)

  if [[ "$desired_tag" != "null" && "$desired_tag" != "" && "$desired_tag" != "$current_tag" ]]; then
    log "Checking out $desired_tag"
    git fetch
    git checkout $desired_tag
  fi
  log "Using ansible-${1} $(git log -n1 --oneline)"
  cd $pwd
}

delete_on_exit $PLAYBOOK

[[ ! -e $PLAYBOOK ]] && ln -s $DIR/$ROLE_NAME.yml $PLAYBOOK


if [[ "$dev_mode" == 'false' ]]; then
  checkout_role "deploy"
  checkout_role "provision"
fi

[[ "$install" == "on" ]] && exit


if [[ ! -e $inventory/hosts && ! -e $inventory/hosts.ini ]]; then
  log "No hosts detected using $hostname/$group"
  echo "[$group]" > $inventory/hosts
  echo "$hostname" >> $inventory/hosts
  delete_on_exit $inventory/hosts
fi

export ANSIBLE_HASH_BEHAVIOUR=merge
export DISPLAY_SKIPPED_HOSTS=false
export DISPLAY_OK_HOSTS=false
export ANSIBLE_CALLBACK_WHITELIST=dense2
# export ANSIBLE_STDOUT_CALLBACK=${ANSIBLE_STDOUT_CALLBACK:-dense2}
export ANSIBLE_CALLBACK_PLUGINS=$DIR/callback_plugins
export ANSIBLE_INVENTORY_IGNORE_REGEX=build/*

log "ansible-playbook $ARGS $PLAYBOOK"

if [[ "$print_ip" == "on" ]]; then
  output_dir=.inventory/out/$hostname
  mkdir -p $output_dir
  ARGS+=" -e output_dir=$output_dir"
fi
>&2 eval ansible-playbook $ARGS $PLAYBOOK
if [[ "$print_ip" == "on" ]]; then
  for f in $(ls $output_dir); do
    cat $output_dir/$f | jq -r '.ip'
  done
fi
# ] <-- needed because of Argbash
