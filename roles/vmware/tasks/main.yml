    - set_fact:
        vm: None
        datacenter: "{{datacenter | default(region) }}"
        cluster: "{{cluster | default(az) }}"
        template: "{{template | default(ami) }}"
        vlan: "{{ vlan | default(subnet_name) | default('') }}"
        vm_attributes: "{{vm_attributes | default(tags) | default({}) }}"
        vcenter_login: &vcenter_login
          hostname: "{{vcenter_hostname}}"
          username: "{{vcenter_username}}"
          password: "{{vcenter_password}}"
          validate_certs: no

    - name: Finding VM
      vmware_guest_facts2:
        <<: *vcenter_login
        datacenter: "{{datacenter}}"
        folder: "/{{datacenter}}/vm"
        name: "{{inventory_hostname}}"
      delegate_to: localhost
      failed_when: false
      register: vm

    - debug: var=vm verbosity=1

    - debug: msg="vm does not exists"
      when: vm.instance is not defined

    - debug: msg="vm exists"
      when: vm.instance is defined

    - include_tasks: './_provision.yml'
      when: vm.instance is not defined


    - name: Waiting for IP
      vmware_guest_facts2:
          <<: *vcenter_login
          datacenter: "{{datacenter}}"
          uuid: "{{vm.instance.hw_product_uuid}}"
          wait_for_ip_address_subnet: "{{wait_for_ip_address_subnet | default('0.0.0.0/0')}}"
          wait_for_ip_address_timeout: 300
      delegate_to: localhost
      register: vm_guest
      when: wait_for_ip is not defined or wait_for_ip == 'true'
      retries: 3
      delay: 10

    - debug: var=vm_guest

    - set_fact:
        ip: "{{vm_guest.get('instance', {}).get('ipv4','')}}"

    - set_fact:
        vm_facts: "{{ vm_guest.get('instance', {}) | combine({'ip': ip})}}"

    - vmware_vm_group:
        <<: *vcenter_login
        cluster: "{{cluster}}"
        uuid: "{{vm.instance.hw_product_uuid}}"
        groups: "{{vm_groups}}"
      when: vm_groups is defined

    - vmware_guest_custom_attributes:
        <<: *vcenter_login
        uuid: "{{vm.instance.hw_product_uuid}}"
        state: present
        attributes: "{{vm_attributes | map_to_entries('name', 'value') }}"
      failed_when: false
