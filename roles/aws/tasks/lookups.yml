  - debug: msg="Looking up AWS details"
    run_once: true

  - set_fact: cf_template_bucket="cloudformation-templates-{{account_id}}-{{region}}"
    when: cf_template_bucket is not defined
    run_once: true

  - ec2_vpc_net_facts:
      region: "{{region}}"
      filters:
        "tag:Name": "{{vpc}}"
    register: vpc_facts
    run_once: true
    when: vpc is defined

  - ec2_vpc_net_facts:
      region: "{{region}}"
    register: vpc_facts1
    run_once: true
    when:  vpc is not defined

  - name: Setting vpc id
    run_once: true
    set_fact:
      vpc: "{{(vpc_facts.vpcs | default(vpc_facts1.vpcs))[0].id}}"

  - debug:
      msg: "Using {{vpc}}"
      verbosity: 1
    run_once: true

  - set_fact: play_groups="{{play_hosts |  play_groups(groups, hostvars) }}"
    run_once: true

  - ec2_vpc_subnet_facts:
      region: "{{region}}"
      filters:
        vpc-id: "{{vpc}}"
    register: all_subnets
    run_once: true

  - debug: var=all_subnets verbosity=2
    run_once: true

  - set_fact: all_subnets="{{all_subnets.subnets}}"
    run_once: true

  - set_fact: zones="{{all_subnets | map(attribute='availability_zone') | unique | list }}"
    run_once: true

  - set_fact: subnets="{{all_subnets | map(attribute='id') | list }}"
    run_once: true

  - name: lookup all security groups
    ec2_group_facts:
      region: "{{region}}"
      filters:
        vpc-id: "{{vpc}}"
    delegate_to: localhost
    run_once: true
    register: sg

  - name: map security groups to name=>id
    set_fact:
      sg_groups: "{{sg.security_groups|json_query('[*].{id: group_id, name: group_name}') | to_map( 'name', 'id') }}"
    run_once: true

  - debug:
      var: sg_groups
    verbosity: 1

  - cloudformation_facts:
      stack_name: "{{stack_name}}"
      region: "{{region}}"
      all_facts: true
    failed_when: false
    register: cf_facts
    check_mode: no
    run_once: true

  - set_fact:
      cf_template_existing: "{{cf_facts.ansible_facts.cloudformation.get(stack_name, {}).stack_template | default({})}}"
    run_once: true

  - set_fact:
      cf_template_existing: "{{ cf_template_existing | regex_replace('!\\w+', '') | from_yaml}}"
    run_once: true

  - debug: var=cf_template_existing verbosity=2
    run_once: true